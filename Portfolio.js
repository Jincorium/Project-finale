import { addItem, getItems, updateItem, deleteItem } from './src/api/firebaseService.js';



const articleWrapper = document.getElementById("article-wrapper");
const articleId = articleWrapper ? articleWrapper.getAttribute('data-article-id') : null;
const STORAGE_KEY = 'comments-manga';          // Kl√≠ƒçe pro localStorage, aby se ukl√°daly koment√°≈ôe a lajky pro tento ƒçl√°nek
const LIKE_STORAGE_KEY = 'liked-manga-article'; // Kl√≠ƒç pro ulo≈æen√≠ stavu lajku ƒçl√°nku


// P≈ôehr√°n√≠ videa po kliknut√≠ na video wrapper (nahrazen√≠ wrapperu iframe s videem)
document.addEventListener('DOMContentLoaded', () => {
  document.querySelectorAll('.video-card .video-wrapper').forEach(wrapper => {
    wrapper.addEventListener('click', () => {
      const article = wrapper.closest('.video-card');
      const videoId = article.dataset.videoId;
      if (!videoId) return;

      // Vytvo≈ôen√≠ iframe pro YouTube video
      const iframe = document.createElement('iframe');
      iframe.src = `https://www.youtube.com/embed/${videoId}?autoplay=1&mute=1&rel=0`;
      iframe.frameBorder = "0";
      iframe.allow = "accele  rometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; autoplay";
      iframe.allowFullscreen = true;
      iframe.style.width = '100%';
      iframe.style.height = '180px';

      // Vyƒçi≈°tƒõn√≠ wrapperu a p≈ôid√°n√≠ iframe
      wrapper.innerHTML = '';
      wrapper.appendChild(iframe);
    });
  });
});

// Filtrace ƒçl√°nk≈Ø podle tag≈Ø a zv√Ωraznƒõn√≠ aktivn√≠ho tagu
document.addEventListener('DOMContentLoaded', () => {
  const tags = document.querySelectorAll('.tag');
  let activeFilter = null;

  tags.forEach(tag => {
    tag.style.cursor = 'pointer'; // P≈ôid√°n√≠ kurzoru pro indikaci kliknut√≠

    tag.addEventListener('click', () => {
      const clickedTag = tag.dataset.tag;

      if (activeFilter === clickedTag) { // Pokud je kliknut√Ω tag ji≈æ aktivn√≠, zru≈°√≠me filtraci
        activeFilter = null;
        showAllArticles();
        clearTagHighlight(tags);
      } else {                           // Pokud je kliknut√Ω tag jin√Ω, nastav√≠me ho jako aktivn√≠ a filtrujeme ƒçl√°nky
        activeFilter = clickedTag;
        filterArticlesByTag(activeFilter);
        highlightActiveTag(tags, activeFilter);
      }
    });
  });
});

function clearTagHighlight(tags) { // Odstranƒõn√≠ zv√Ωraznƒõn√≠ v≈°ech tag≈Ø
  tags.forEach(tag => tag.classList.remove('active'));
}

function highlightActiveTag(tags, tagName) {  // Zv√Ωraznƒõn√≠ aktivn√≠ho tagu
  tags.forEach(tag => {
    tag.classList.toggle('active', tag.dataset.tag === tagName);
  });
}

function showAllArticles() {  // Zobrazen√≠ v≈°ech ƒçl√°nk≈Ø
  const articles = document.querySelectorAll('.card');
  articles.forEach(article => article.style.display = '');
}

function filterArticlesByTag(tag) { // Skr√Ωv√°n√≠ ƒçl√°nk≈Ø, kter√© neobsahuj√≠ zvolen√Ω tag
  const articles = document.querySelectorAll('.card');
  articles.forEach(article => {
    const articleTags = Array.from(article.querySelectorAll('.tag')).map(t => t.dataset.tag);
    if (articleTags.includes(tag)) {
      article.style.display = '';
    } else {
      article.style.display = 'none';
    }
  });
}

//  P≈ôep√≠naƒç tmav√©ho re≈æimu
const toggleButton = document.getElementById("darkModeToggle");
toggleButton.addEventListener("click", () => {
  document.body.classList.toggle("dark-mode");

  const isDark = document.body.classList.contains("dark-mode");
  toggleButton.textContent = isDark ? "‚òÄÔ∏è" : "üåô";
});

// P≈ôehr√°v√°n√≠ ƒçl√°nku pomoc√≠ Web Speech API
const listenButton = document.getElementById("listenButton");
const articleContent = document.getElementById("article-content");

let isSpeaking = false;
let utterance;

listenButton.addEventListener("click", () => {
  if (isSpeaking) { // Pokud u≈æ mluv√≠me, zastav√≠me p≈ôehr√°v√°n√≠
    speechSynthesis.cancel();
    isSpeaking = false;
    listenButton.textContent = "üîä";
    return;
  }

  const text = articleContent.innerText || articleContent.textContent; // Z√≠sk√°n√≠ textu z obsahu ƒçl√°nku
  utterance = new SpeechSynthesisUtterance(text);
  utterance.lang = "en-US";

  utterance.onend = () => { // Po skonƒçen√≠ mluven√≠ nastav√≠me stav
    isSpeaking = false;
    listenButton.textContent = "üîä";
  };

  speechSynthesis.speak(utterance); // Spust√≠me mluven√≠
  isSpeaking = true;
  listenButton.textContent = "‚èπ";
});

// V√Ωpoƒçet ƒçasu ƒçten√≠ ƒçl√°nku
document.addEventListener("DOMContentLoaded", () => {
  const articleWrapper = document.getElementById("article-wrapper");


  if (articleWrapper) { // Pokud existuje wrapper ƒçl√°nku, spoƒç√≠t√°me slova
    const text = articleWrapper.innerText || articleWrapper.textContent;
    const words = text.trim().split(/\s+/).length;
    const wordsPerMinute = 200;
    const readingTime = Math.ceil(words / wordsPerMinute);

    const readingTimeElement = document.getElementById("reading-time");   // Element pro zobrazen√≠ ƒçasu ƒçten√≠
    if (readingTimeElement) {
      readingTimeElement.textContent = `‚è± ${readingTime} min read`;
    }
  }
});

// Lajkov√°n√≠ ƒçl√°nku pomoc√≠ localStorage
document.addEventListener("DOMContentLoaded", () => {
  const likeButton = document.getElementById("likeButton");

  if (localStorage.getItem(LIKE_STORAGE_KEY) === "true") {  // Zkontrolujeme, jestli je ƒçl√°nek ji≈æ lajkovan√Ω
    likeButton.classList.add("liked");
  }

  likeButton.addEventListener("click", () => {  // P≈ôepnut√≠ stavu lajku p≈ôi kliknut√≠ na tlaƒç√≠tko
    const liked = likeButton.classList.toggle("liked");
    localStorage.setItem(LIKE_STORAGE_KEY, liked);
  });
});


// Koment√°≈ôe: p≈ôid√°n√≠, zobrazen√≠ a ulo≈æen√≠ do localStorage

const commentModal = document.getElementById('commentModal');
const commentButton = document.getElementById('commentButton');
const submitComment = document.getElementById('submitComment');
const cancelComment = document.getElementById('cancelComment');
const commentName = document.getElementById('commentName');
const commentText = document.getElementById('commentText');
const commentList = document.getElementById('commentList');

// Otev≈ôen√≠ mod√°ln√≠ho okna pro p≈ôid√°n√≠ koment√°≈ôe
commentButton.addEventListener('click', () => {
  commentModal.classList.remove('hidden');
});

// Skryt√≠ mod√°ln√≠ho okna a vyƒçi≈°tƒõn√≠ vstup≈Ø
cancelComment.addEventListener('click', () => {
  commentModal.classList.add('hidden');
  commentName.value = '';
  commentText.value = '';
});

// Naƒçten√≠ ulo≈æen√Ωch koment√°≈ô≈Ø z localStorage p≈ôi naƒçten√≠ str√°nky
window.addEventListener('DOMContentLoaded', async () => { 
  try {
    const items = await getItems(articleId);  // Fetch comments for this specific article
    items.forEach(({ name, comment }) => {
      appendCommentToDOM(name, comment);
    });
  } catch (error) {
    console.error('Error loading comments from Firestore:', error);
  }
});

// Odesl√°n√≠ koment√°≈ôe: p≈ôid√°n√≠ do DOM a ulo≈æen√≠ do localStorage
submitComment.addEventListener('click', async () => {
  const name = commentName.value.trim();
  const comment = commentText.value.trim();

  if (!name || !comment) {
    alert('Please fill in both name and comment!');
    return;
  }

  // Save to Firebase
  await addItem({ name, comment, articleId });

  appendCommentToDOM(name, comment);

  commentName.value = '';
  commentText.value = '';
  commentModal.classList.add('hidden');
});

// Funkce pro p≈ôid√°n√≠ koment√°≈ôe do DOM
function appendCommentToDOM(name, comment) {
  const div = document.createElement('div');
  div.classList.add('comment-entry');
  div.innerHTML = `<strong>${escapeHtml(name)}</strong><p>${escapeHtml(comment)}</p>`;
  commentList.appendChild(div);
}

// Funkce pro √∫nik HTML znak≈Ø, aby se zabr√°nilo XSS √∫tok≈Øm
function escapeHtml(text) {
  const div = document.createElement('div');
  div.textContent = text;
  return div.innerHTML;
}

const sidebar = document.getElementById("sidebarSecondary");
const toggleBtn = document.getElementById("sidebarToggle");

if (sidebar && toggleBtn) { // Inicializace sidebaru a p≈ôep√≠naƒçe
  toggleBtn.setAttribute("aria-expanded", "false");

  toggleBtn.addEventListener("click", () => {
    const isVisible = sidebar.classList.toggle("sidebar-visible");
    sidebar.classList.toggle("sidebar-hidden", !isVisible);
    toggleBtn.setAttribute("aria-expanded", isVisible ? "true" : "false");
  });

  document.addEventListener("click", (event) => { // Kliknut√≠ mimo sidebar a p≈ôep√≠naƒç skryje sidebar
    if (!sidebar.contains(event.target) && !toggleBtn.contains(event.target)) {
      sidebar.classList.remove("sidebar-visible");
      sidebar.classList.add("sidebar-hidden");
      toggleBtn.setAttribute("aria-expanded", "false");
    }
  });

  // Zav≈ôen√≠ sidebaru pomoc√≠ kl√°vesy Escape
  document.addEventListener("keydown", (event) => {
    if (event.key === "Escape") {
      sidebar.classList.remove("sidebar-visible");
      sidebar.classList.add("sidebar-hidden");
      toggleBtn.setAttribute("aria-expanded", "false");
    }
  });
}


